{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","reactDom","render","document","getElementById"],"mappings":"4MAmCeA,EAhCY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,sCCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCWLO,EAVK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCoBDO,EAtBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGd,ECJwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGvB,CAACpB,IAGIqB,EDbyBK,CAAc1B,GAAjCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACA,6BAAKpB,IAEJoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEU/BgB,EAzBM,WAEjB,MAAoCzC,mBAAS,CAAC,UAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BACKS,EAAWe,KAAK,SAAET,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCjBzC4B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.f160f7e9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length>2){\n            setCategories( categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=BNEDlqIpzUui95BkEWZXz9AefuE8k2Md&q=${encodeURI(category)}&limit=10`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ( {id, title, url} ) => {\n    \n    return (\n        <div className=\"card animate__animated animate__zoomIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n//import { getGifs } from '../helpers/getGifs'\n\nconst GifGrid = ({category}) => {\n\n    //const [images, setImages] = useState([]);\n    const {data: images, loading} = useFetchGifs( category );\n    \n    return (\n        <>\n        <h3>{category}</h3>\n\n        {loading && <p>Loading</p>}\n\n        <div className=\"card-grid\">\n                { \n                    images.map( (img) => (\n                        <GifGridItem key={img.id} {...img}/>\n                    )) \n                }\n        </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useState } from \"react\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category)\n            .then( imgs => {  \n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            });\n    },[category]);\n    \n\n    return state;\n}\n","import { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Luffy']);\n\n    // const handleAdd = () => {\n    //     setCategories([...categories, 'Nami']);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n\n            <hr />\n\n            <ol>\n                {categories.map( ( category )=> {\n                    return <GifGrid key={category} category={category}/>\n                })}\n            </ol>\n\n        </>\n    );\n}\n\nexport default GifExpertApp;","import reactDom from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nreactDom.render(<GifExpertApp />,document.getElementById('root'));"],"sourceRoot":""}